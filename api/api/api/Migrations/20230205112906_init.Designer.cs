// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230205112906_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "8b67e980-44a0-437c-b2c1-43bd87e203bc",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 541, DateTimeKind.Utc).AddTicks(9233),
                            IsDeleted = false,
                            Name = "Mariane Devin Jakubowski PhD",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 541, DateTimeKind.Utc).AddTicks(9236)
                        },
                        new
                        {
                            Id = "a9fe18a3-4138-4371-bcf4-f2431e735c9e",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(1042),
                            IsDeleted = false,
                            Name = "Prof. Marta Block MD",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(1043)
                        },
                        new
                        {
                            Id = "e90de408-a3cc-4c48-b753-d9641afea031",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(1977),
                            IsDeleted = false,
                            Name = "Jack O'Keefe",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(1978)
                        },
                        new
                        {
                            Id = "ce14eda4-cb0c-4379-b13d-114a98317d91",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(2870),
                            IsDeleted = false,
                            Name = "Lauriane Durgan",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(2870)
                        },
                        new
                        {
                            Id = "3c572b81-105d-40ea-9897-b7d03336a674",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(3795),
                            IsDeleted = false,
                            Name = "Mafalda Teresa Howell MD",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(3795)
                        },
                        new
                        {
                            Id = "254bea6c-2bc5-4ec6-9899-4e3b08533a3d",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(5420),
                            IsDeleted = false,
                            Name = "Pietro Lowe",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(5421)
                        },
                        new
                        {
                            Id = "26a35f16-7798-4cde-8f65-4393dbe4edad",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(6301),
                            IsDeleted = false,
                            Name = "Prof. Alyson Kyleigh Von Jr.",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(6301)
                        },
                        new
                        {
                            Id = "ca93d851-7d02-4de0-bc82-1abbb1b1dc7d",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(7921),
                            IsDeleted = false,
                            Name = "Jennie Volkman",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(7921)
                        },
                        new
                        {
                            Id = "1ae30045-98d5-488f-bc88-e1fd1919fb59",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(8806),
                            IsDeleted = false,
                            Name = "Aniya Rosenbaum",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(8806)
                        },
                        new
                        {
                            Id = "057c7357-bb76-4391-acf5-a5c53dad78cd",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(9713),
                            IsDeleted = false,
                            Name = "Mr. Cierra Lavonne Heathcote Jr.",
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 542, DateTimeKind.Utc).AddTicks(9713)
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderCompletionType")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = "5c868d34-37c8-48b7-8d09-54fa86c1a289",
                            Content = "Placeat eaque impedit rem sed aut sed ullam. Vitae a facilis eum voluptatem eveniet. Ad est similique quam eum. Facere fugiat et quae et. Inventore quia enim dicta quam et qui.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 543, DateTimeKind.Utc).AddTicks(1347),
                            Description = "Doloribus qui quasi consequatur maxime.",
                            IsDeleted = false,
                            Name = "Destiney Grant",
                            Price = 883028L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 543, DateTimeKind.Utc).AddTicks(1347)
                        },
                        new
                        {
                            Id = "8fcf0c40-9769-47ba-b816-48cdcb2eeaa4",
                            Content = "Eligendi non quis a a enim est repellat voluptates maxime. Magni dolorum tempore exercitationem ducimus pariatur fuga explicabo quia esse. Ut sit necessitatibus consequatur. Suscipit voluptatem officiis natus numquam placeat ipsa animi molestias.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 543, DateTimeKind.Utc).AddTicks(4531),
                            Description = "Ab quasi ut ducimus et aperiam dolor quasi quaerat expedita.",
                            IsDeleted = false,
                            Name = "Miss Cynthia Monique Adams Sr.",
                            Price = 814871L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 543, DateTimeKind.Utc).AddTicks(4531)
                        },
                        new
                        {
                            Id = "92c37962-ec95-4443-a86d-a0a077b26926",
                            Content = "Totam minima quam ipsam iure quam voluptatem ut voluptatem. Et expedita ullam nemo dolorum quia asperiores. Alias nisi ea optio. Doloribus eos et velit modi accusantium reprehenderit corrupti numquam. Quia odio expedita qui maxime. Et et sit animi consequatur eum reiciendis.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 543, DateTimeKind.Utc).AddTicks(9996),
                            Description = "Recusandae iste recusandae placeat aliquid nihil et temporibus.",
                            IsDeleted = false,
                            Name = "Geo Chaim Hahn II",
                            Price = 318752L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 543, DateTimeKind.Utc).AddTicks(9998)
                        },
                        new
                        {
                            Id = "095be80d-f11c-46aa-a7fc-6bf1ee698fa6",
                            Content = "Enim quis expedita voluptas voluptas incidunt. Quia nesciunt ullam aspernatur praesentium aut doloremque est. Vitae aut quis tempore voluptatem et unde quo. Consequatur consequatur quisquam cupiditate accusamus nesciunt.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 544, DateTimeKind.Utc).AddTicks(7276),
                            Description = "Veritatis aliquam facilis molestiae quod quae iure ad magni.",
                            IsDeleted = false,
                            Name = "Dr. Scotty Zboncak",
                            Price = 676298L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 544, DateTimeKind.Utc).AddTicks(7279)
                        },
                        new
                        {
                            Id = "f1422ece-ad6c-4877-83a6-44e46abe016e",
                            Content = "Et error sapiente tempora. Eaque quis dolor sapiente ratione et nulla et. Ut iure adipisci rerum et quidem. Debitis eaque placeat error dicta voluptas.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 545, DateTimeKind.Utc).AddTicks(1401),
                            Description = "Quia non modi nisi aut excepturi odit earum.",
                            IsDeleted = false,
                            Name = "Lilla Crooks",
                            Price = 223717L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 545, DateTimeKind.Utc).AddTicks(1404)
                        },
                        new
                        {
                            Id = "f56bf040-6fcd-4ad3-b782-f572d09d3b15",
                            Content = "Debitis veniam voluptates et similique. Sed ea nobis et sed qui aut sit debitis eaque. Accusamus sunt est modi qui omnis.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 545, DateTimeKind.Utc).AddTicks(8395),
                            Description = "Temporibus pariatur a et rerum iste vero et modi.",
                            IsDeleted = false,
                            Name = "Reginald Gerlach",
                            Price = 983616L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 545, DateTimeKind.Utc).AddTicks(8398)
                        },
                        new
                        {
                            Id = "01c4d110-ec55-442f-87b9-5851138149ee",
                            Content = "Vel odio ullam sequi quia qui ut et tempore sed. Itaque consequuntur quisquam alias voluptatem atque sapiente nam. Et laudantium deleniti ipsa vel eos. Est rerum consequatur cumque veniam odit et recusandae recusandae.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 546, DateTimeKind.Utc).AddTicks(3289),
                            Description = "Sint eos quia quis.",
                            IsDeleted = false,
                            Name = "Mr. Shany Lynch PhD",
                            Price = 775308L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 546, DateTimeKind.Utc).AddTicks(3293)
                        },
                        new
                        {
                            Id = "870aa1e2-3b2c-4021-b35a-52f49ee14f8a",
                            Content = "Minima recusandae at non itaque. Blanditiis amet excepturi autem perferendis aut non error modi. Architecto harum optio repellat. Ipsam modi repellendus et. Officia voluptates sit ut.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 547, DateTimeKind.Utc).AddTicks(605),
                            Description = "Eaque est qui possimus iste.",
                            IsDeleted = false,
                            Name = "Miss Devonte Schowalter",
                            Price = 535457L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 547, DateTimeKind.Utc).AddTicks(608)
                        },
                        new
                        {
                            Id = "56bbacbd-2225-4612-9723-bab7fd93f8a2",
                            Content = "Et molestias delectus voluptas atque non in porro ullam suscipit. A voluptates ut ullam voluptas in. Porro et quia earum nam consequuntur odit et ut omnis. Aliquid dolores voluptas velit molestiae qui molestiae voluptates sunt.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 547, DateTimeKind.Utc).AddTicks(5488),
                            Description = "Quia magnam facere et sit excepturi omnis ad.",
                            IsDeleted = false,
                            Name = "Isom Marquardt",
                            Price = 454650L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 547, DateTimeKind.Utc).AddTicks(5491)
                        },
                        new
                        {
                            Id = "2d3637cf-f1b3-4643-91a9-4c388a93c7ff",
                            Content = "Ut qui alias praesentium veritatis quas odio in. Sequi repellendus optio odit. Deserunt et corporis quae inventore sint nisi. Ut doloribus et et quia. Ad porro ratione laborum dolorem.",
                            CreatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 548, DateTimeKind.Utc).AddTicks(1446),
                            Description = "Dolores consequuntur adipisci laudantium et ipsum.",
                            IsDeleted = false,
                            Name = "Miss Chelsey Oceane Barton III",
                            Price = 436749L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 11, 29, 6, 548, DateTimeKind.Utc).AddTicks(1449)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f056af36-b088-4383-be8b-0ba812f0cb7b",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "e906d2a8-b70c-4900-a048-49bcb477373e",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ac990f26-b322-4520-bea0-852c0d1dda1d",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d72a724e-90c4-4093-82ca-46c1b6807b83",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a8727a0-0ece-4d74-9f73-7ea1f4195f51",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            IsDeleted = false,
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "6c70c20e-7024-461f-b178-d9f8cab63b96",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "1224b026-d3a9-4b7f-81ba-0691f30b5af9",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "89483d11-7e8f-4a0f-8fcd-a6d11c6605d6",
                            Name = "User",
                            NormalizedName = "USER",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "eedb2042-cb09-42f4-829a-3a40dd5f7968",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
