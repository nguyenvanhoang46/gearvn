// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230102142805_Update_Entity")]
    partial class Update_Entity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "5625d8a6-6846-411b-810b-4bac6e72e160",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 753, DateTimeKind.Utc).AddTicks(6660),
                            IsDeleted = false,
                            Name = "Dewayne Kshlerin",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 753, DateTimeKind.Utc).AddTicks(6662)
                        },
                        new
                        {
                            Id = "9f6a2c53-13b1-46bd-a490-6c0c7814e83a",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 753, DateTimeKind.Utc).AddTicks(7997),
                            IsDeleted = false,
                            Name = "Prof. Kellie Cheyanne Dickens IV",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 753, DateTimeKind.Utc).AddTicks(7997)
                        },
                        new
                        {
                            Id = "9bcf978c-76a2-471d-a453-848ac6f87791",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(510),
                            IsDeleted = false,
                            Name = "Mr. Jeffrey Gregoria Morissette",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(510)
                        },
                        new
                        {
                            Id = "f2129d5d-eeed-4d42-899c-f64aa82fbe46",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(2373),
                            IsDeleted = false,
                            Name = "Stanford Lubowitz",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(2373)
                        },
                        new
                        {
                            Id = "c88f594e-8a5c-45ee-bce6-19061590a9eb",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(3321),
                            IsDeleted = false,
                            Name = "Prof. Katarina Stokes",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(3322)
                        },
                        new
                        {
                            Id = "79636609-6181-471d-9aec-d7c071a77156",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(4314),
                            IsDeleted = false,
                            Name = "Prof. Tod Roob PhD",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(4314)
                        },
                        new
                        {
                            Id = "58e55eb6-fdf8-48cb-a130-dfe7a7186750",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(5221),
                            IsDeleted = false,
                            Name = "Ms. Kadin Kylee Dickens",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(5221)
                        },
                        new
                        {
                            Id = "aac2ff7e-6a76-4f1d-a301-78bc1c679ec8",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(6881),
                            IsDeleted = false,
                            Name = "Monserrate Vernie Reynolds MD",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(6881)
                        },
                        new
                        {
                            Id = "28b77db2-31fe-4f92-bf5a-c461a9c16c91",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(8617),
                            IsDeleted = false,
                            Name = "Foster Kunde",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(8617)
                        },
                        new
                        {
                            Id = "3673056f-b803-43a0-a8c2-bf47a3c7f259",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(9515),
                            IsDeleted = false,
                            Name = "Dr. Dustin Wuckert DVM",
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 754, DateTimeKind.Utc).AddTicks(9516)
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderCompletionType")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = "685d73bf-3de5-4902-a4a3-fd8b46a9a45c",
                            Content = "Quia vitae consequatur eveniet ducimus eveniet repudiandae pariatur. Qui nisi et dolores. Rerum aliquid placeat ut modi optio ipsa. Quidem ut in rem illum. Quasi et eos dolor. Ipsam commodi quasi quos omnis mollitia quam itaque non.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 755, DateTimeKind.Utc).AddTicks(391),
                            Description = "Consequatur omnis et reiciendis exercitationem maxime cum.",
                            IsDeleted = false,
                            Name = "Chris Cole",
                            Price = 479781L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 755, DateTimeKind.Utc).AddTicks(391)
                        },
                        new
                        {
                            Id = "5289fd92-c3f4-407f-8b1c-375afa3453e1",
                            Content = "Odio iusto fuga pariatur reprehenderit repellendus. Nisi dolorem neque porro voluptas. Ut laboriosam et iusto quo voluptate sit. Occaecati totam voluptatum autem.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 755, DateTimeKind.Utc).AddTicks(4279),
                            Description = "Aut minima ut animi adipisci aut voluptatem.",
                            IsDeleted = false,
                            Name = "Liliane Crist",
                            Price = 360642L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 755, DateTimeKind.Utc).AddTicks(4279)
                        },
                        new
                        {
                            Id = "56bc8b92-23c8-4053-8f08-84843cea19eb",
                            Content = "Reiciendis est qui molestiae quo animi quos. Atque qui ratione hic dolorem aut qui cum nisi quidem. Ab ut impedit natus temporibus eum eaque odit. Sunt ipsa facilis molestiae doloribus repellat ipsum cumque asperiores hic. Ut magnam dolore laboriosam voluptate ullam.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 755, DateTimeKind.Utc).AddTicks(7177),
                            Description = "Neque ullam unde reiciendis.",
                            IsDeleted = false,
                            Name = "Abbey Eldon Blanda IV",
                            Price = 145357L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 755, DateTimeKind.Utc).AddTicks(7177)
                        },
                        new
                        {
                            Id = "58edc340-641c-4e77-ba26-0b84ebc08e3a",
                            Content = "Accusamus et fugit voluptatem quibusdam ad perspiciatis veritatis. Ut delectus expedita velit harum voluptas molestiae at ex. Et consequatur et ea illum incidunt. Iusto architecto dolores magni harum non. Debitis qui id et magnam.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 756, DateTimeKind.Utc).AddTicks(1904),
                            Description = "Cupiditate et magnam esse minima suscipit eum voluptatem illum.",
                            IsDeleted = false,
                            Name = "Zane Gleason IV",
                            Price = 934713L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 756, DateTimeKind.Utc).AddTicks(1906)
                        },
                        new
                        {
                            Id = "e7af37e1-edca-4db9-a1e0-ea348fbe85d0",
                            Content = "Animi possimus accusamus fugit veritatis. Inventore et vel est nam. Quia explicabo mollitia omnis similique nihil occaecati.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 756, DateTimeKind.Utc).AddTicks(5712),
                            Description = "Amet dolorum earum id id quibusdam minus.",
                            IsDeleted = false,
                            Name = "Christina Fahey",
                            Price = 516124L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 756, DateTimeKind.Utc).AddTicks(5713)
                        },
                        new
                        {
                            Id = "13eda561-16c7-4f68-8ccb-3fad2e002c3d",
                            Content = "Sit unde veritatis ex voluptatibus molestiae corrupti quia dignissimos. Rerum tenetur magnam alias in voluptatibus sit nulla. Tempore rem quaerat est pariatur. Earum ut modi voluptatibus.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 756, DateTimeKind.Utc).AddTicks(8263),
                            Description = "Sunt aspernatur voluptates quibusdam sed delectus architecto magnam.",
                            IsDeleted = false,
                            Name = "Elwyn Bernhard",
                            Price = 587129L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 756, DateTimeKind.Utc).AddTicks(8264)
                        },
                        new
                        {
                            Id = "981a4584-4383-4772-bea3-a4614d1c8ee3",
                            Content = "Nesciunt iure est placeat in architecto vero necessitatibus qui harum. Labore in repudiandae ut magni qui recusandae aliquam. Voluptatibus quod ipsa magnam labore similique quod. Quia quia et laboriosam molestiae.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 757, DateTimeKind.Utc).AddTicks(1343),
                            Description = "Eaque ducimus rem quisquam facilis sit esse autem totam.",
                            IsDeleted = false,
                            Name = "Ally Carroll",
                            Price = 721989L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 757, DateTimeKind.Utc).AddTicks(1344)
                        },
                        new
                        {
                            Id = "3e840e3e-50d7-4b15-b048-27aac13f8074",
                            Content = "Debitis sit corporis laboriosam impedit voluptas est sed. Temporibus molestiae magnam culpa minus quibusdam iste autem. Explicabo doloribus corrupti sit quae quo sit molestiae laborum.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 757, DateTimeKind.Utc).AddTicks(4863),
                            Description = "Alias et laboriosam incidunt deleniti sed et.",
                            IsDeleted = false,
                            Name = "Maximillia Altenwerth",
                            Price = 439487L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 757, DateTimeKind.Utc).AddTicks(4864)
                        },
                        new
                        {
                            Id = "be9395cb-df11-4492-8456-9c6649fb3f54",
                            Content = "Possimus quibusdam officia in minus iusto ab atque. Quas omnis alias voluptatibus. Aliquid tenetur reiciendis et magnam beatae saepe.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 757, DateTimeKind.Utc).AddTicks(7885),
                            Description = "Id ea blanditiis voluptatem recusandae eum sunt qui natus.",
                            IsDeleted = false,
                            Name = "Bud Bergstrom",
                            Price = 505216L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 757, DateTimeKind.Utc).AddTicks(7885)
                        },
                        new
                        {
                            Id = "697a111d-bb33-4d61-8f07-153529bdbb81",
                            Content = "Ratione ut possimus fugit et esse perferendis ipsa ratione dolores. Assumenda et et enim. Ipsa eos et dolores omnis. Beatae minus optio eligendi et excepturi officia. Inventore illum qui expedita repellat sed nesciunt distinctio perferendis.",
                            CreatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 758, DateTimeKind.Utc).AddTicks(1259),
                            Description = "Omnis enim aut delectus voluptas itaque consequatur quo.",
                            IsDeleted = false,
                            Name = "Ms. Chanelle Gislason MD",
                            Price = 527782L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 1, 2, 14, 28, 4, 758, DateTimeKind.Utc).AddTicks(1259)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e2d9327f-c09b-4de6-ac41-26b9b4dccb7a",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "385a3b7e-664f-41d7-b940-b87923de3341",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c65c4a6e-6ecc-44b4-ad23-b57c0342be02",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d80841d7-3a6b-4a7a-b566-b5744ad289c4",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "16206622-4876-44bb-855a-fb6b1bd0674f",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            IsDeleted = false,
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d23bdc82-f7c3-4af3-81a2-3a57a479166b",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "f33791e4-e199-4302-9122-d07a8d0e7ac8",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "33bce3f2-3451-46c2-918a-264a8277ac10",
                            Name = "User",
                            NormalizedName = "USER",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "a0745c84-46da-4b2b-93eb-1a1a721fa9c3",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
