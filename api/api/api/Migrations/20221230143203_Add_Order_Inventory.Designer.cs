// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221230143203_Add_Order_Inventory")]
    partial class Add_Order_Inventory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "c3b4daef-fe81-4689-8491-17dd693223bc",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(2493),
                            IsDeleted = false,
                            Name = "Mr. Darrel Swift",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(2494)
                        },
                        new
                        {
                            Id = "7bcae963-2fd6-4d21-a0ac-3dcd87f82d22",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(4522),
                            IsDeleted = false,
                            Name = "Judge Medhurst",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(4523)
                        },
                        new
                        {
                            Id = "261a5248-5170-456a-8146-a90099f71867",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(5634),
                            IsDeleted = false,
                            Name = "Faustino Kling DVM",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(5634)
                        },
                        new
                        {
                            Id = "cec4412b-f59a-472a-b561-d44884160d1c",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(7001),
                            IsDeleted = false,
                            Name = "Aditya Metz",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(7001)
                        },
                        new
                        {
                            Id = "2540409b-319a-43c1-8e3d-c0c90a3a39e2",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(8074),
                            IsDeleted = false,
                            Name = "Nola Sipes",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(8074)
                        },
                        new
                        {
                            Id = "774b79c2-fccf-4447-bb31-cb61afacae60",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(9031),
                            IsDeleted = false,
                            Name = "Dell Crooks",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 123, DateTimeKind.Utc).AddTicks(9031)
                        },
                        new
                        {
                            Id = "f9e2890c-2a82-4e56-8cc2-c7b982a25481",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(39),
                            IsDeleted = false,
                            Name = "Mrs. Rocky Marlon Batz DVM",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(39)
                        },
                        new
                        {
                            Id = "36573948-d1f1-4cc3-91b9-912866a802aa",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(1946),
                            IsDeleted = false,
                            Name = "Chandler Ryan",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(1946)
                        },
                        new
                        {
                            Id = "2224eb45-9beb-4b0f-b95e-c7bfe654f2dd",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(2971),
                            IsDeleted = false,
                            Name = "Madison Monahan",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(2971)
                        },
                        new
                        {
                            Id = "a93d7cfd-c91c-4117-8229-62b3caaaa0ce",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(3921),
                            IsDeleted = false,
                            Name = "Monty Wyman",
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(3921)
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderCompletionType")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = "319562dd-f352-44fb-b792-44341f40f35e",
                            Content = "Dolores tempora sed ex earum. Nobis dolorem quo culpa commodi et odio. Rem quia ea inventore quia consequatur rem sint. Et omnis ut vero molestias tempora excepturi dolores. Ut commodi recusandae ut veritatis aspernatur. Et quam eum eligendi aut ipsa ut architecto.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(4895),
                            Description = "Labore cum autem neque occaecati mollitia rem recusandae.",
                            IsDeleted = false,
                            Name = "Mrs. Camilla Cayla Rosenbaum",
                            Price = 410010L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 124, DateTimeKind.Utc).AddTicks(4895)
                        },
                        new
                        {
                            Id = "0f8d0da7-6efd-46cd-9575-a644b76a922f",
                            Content = "Reiciendis in dolor voluptas voluptatem vero earum molestiae consequatur. Itaque nostrum quaerat velit vel esse aut suscipit. In nulla minima minima in quibusdam et ullam placeat. Necessitatibus rerum dolorem et aut repellat neque. Eius quia beatae quo ea.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 125, DateTimeKind.Utc).AddTicks(941),
                            Description = "Laborum aut tempore sed tempora.",
                            IsDeleted = false,
                            Name = "Miss Concepcion Ledner",
                            Price = 303601L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 125, DateTimeKind.Utc).AddTicks(942)
                        },
                        new
                        {
                            Id = "547ae8b8-e61f-42ae-b9fe-91c3d30aef94",
                            Content = "Assumenda sit libero esse ea placeat qui quam nisi. Dolore aut voluptatem similique sint officiis odit et eos optio. Sed quibusdam qui voluptas amet cupiditate molestiae et repellat dicta. Est eum fuga et. Non labore et architecto dolore est in.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 125, DateTimeKind.Utc).AddTicks(4972),
                            Description = "Amet voluptatum voluptatibus voluptatem aperiam quia.",
                            IsDeleted = false,
                            Name = "Mrs. Elsa Parker Swaniawski PhD",
                            Price = 502252L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 125, DateTimeKind.Utc).AddTicks(4972)
                        },
                        new
                        {
                            Id = "23454a4b-2cf0-44fd-91e8-39952f740983",
                            Content = "Doloribus tempora mollitia perferendis tempore. Perspiciatis illum vitae mollitia blanditiis voluptas quod recusandae. Quas expedita consequatur voluptas maiores sed. Aut voluptatem voluptas architecto.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 125, DateTimeKind.Utc).AddTicks(9887),
                            Description = "Est aperiam eum qui neque sit dolore.",
                            IsDeleted = false,
                            Name = "Miss Savanah Dariana Reynolds",
                            Price = 447606L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 125, DateTimeKind.Utc).AddTicks(9888)
                        },
                        new
                        {
                            Id = "853d6b97-8c2c-4711-ab59-cdd01765c3ce",
                            Content = "Dolorem quis ea et voluptas sit rem. Impedit qui aut cum consequuntur aut quas. Facere ut autem dignissimos voluptatem dolorum dolor. Rerum et totam qui. Perferendis odio dolorem dolor nihil sit quidem consectetur dolores. Voluptatem cumque ullam nam omnis qui dignissimos placeat excepturi.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 126, DateTimeKind.Utc).AddTicks(3611),
                            Description = "Incidunt ad iure quia sunt magnam.",
                            IsDeleted = false,
                            Name = "Glen Hamill",
                            Price = 290868L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 126, DateTimeKind.Utc).AddTicks(3612)
                        },
                        new
                        {
                            Id = "d81a2091-4732-44fd-834b-709dd4aed0dd",
                            Content = "Sunt modi deserunt facere rerum totam non sint tenetur consequatur. Labore velit vero magnam. Et dolor quod eos.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 126, DateTimeKind.Utc).AddTicks(7734),
                            Description = "Et molestiae rerum ut sit quod dolore ea rerum.",
                            IsDeleted = false,
                            Name = "Merl Satterfield III",
                            Price = 580042L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 126, DateTimeKind.Utc).AddTicks(7735)
                        },
                        new
                        {
                            Id = "62fa8be3-df63-42d4-8ce3-1ab52bf5efe6",
                            Content = "Dolorum aperiam voluptate hic esse molestiae eum. Sit qui omnis laudantium quisquam aut sed tempora id. Mollitia iste fugiat omnis quam sit est et. Saepe eaque possimus beatae numquam qui.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 127, DateTimeKind.Utc).AddTicks(304),
                            Description = "Aut unde et cum animi voluptates a praesentium dolorem.",
                            IsDeleted = false,
                            Name = "Miss Alexandrea Leffler",
                            Price = 295286L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 127, DateTimeKind.Utc).AddTicks(304)
                        },
                        new
                        {
                            Id = "71271579-88af-420c-807b-86b423e4e2a3",
                            Content = "Enim vel aut voluptatem sit. Debitis quis inventore sed deleniti necessitatibus similique ex voluptatem. Cupiditate ut est porro deleniti. Veniam vel id sunt itaque quo labore id.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 127, DateTimeKind.Utc).AddTicks(3705),
                            Description = "Possimus perspiciatis praesentium aut aliquam provident voluptas iste soluta.",
                            IsDeleted = false,
                            Name = "Prof. Letitia Terry",
                            Price = 792524L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 127, DateTimeKind.Utc).AddTicks(3705)
                        },
                        new
                        {
                            Id = "7cfc21f7-daea-4032-ab5e-afbf33df0416",
                            Content = "Quia cumque minus cum ad cum nihil optio minima omnis. Et itaque et nemo minima nisi doloremque inventore. Eum autem nemo eos a laborum. Unde corporis laudantium ut voluptatem pariatur.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 127, DateTimeKind.Utc).AddTicks(6899),
                            Description = "Eos maxime enim nobis rerum aut sunt debitis facilis.",
                            IsDeleted = false,
                            Name = "Donald Kulas",
                            Price = 680874L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 127, DateTimeKind.Utc).AddTicks(6900)
                        },
                        new
                        {
                            Id = "bf525c35-7a02-4bbc-9554-4e1f87ad2640",
                            Content = "Enim soluta rerum aut fugiat in culpa illo ut aut. Eos explicabo debitis molestiae quisquam perferendis ab reprehenderit eveniet. Fuga numquam eius dolores. Excepturi incidunt aut nisi. Omnis et quo soluta suscipit aut quaerat enim. Doloribus cumque eveniet consequatur consequatur vero aut rerum pariatur.",
                            CreatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 128, DateTimeKind.Utc).AddTicks(373),
                            Description = "Culpa dolor blanditiis est id eaque sed velit.",
                            IsDeleted = false,
                            Name = "Prof. Raul Dach",
                            Price = 211772L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 14, 32, 3, 128, DateTimeKind.Utc).AddTicks(373)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "07206af6-aff5-4ea7-9fdb-e6f557122044",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "9d69bd75-ca33-4f4a-ab13-68968a3bb22c",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f40c3547-5014-4122-9347-a7448f10049e",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "c7714e28-dd92-4921-a2cd-00a284347ebb",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87976657-1a1b-4da1-8afe-887e854d17c4",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5f847ad5-87e7-4e6e-ad09-24aec5d17164",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "9e1b1a3a-f39e-4844-8017-8c32e395ec19",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "5e5a6786-a46c-4b52-a686-6eb234380460",
                            Name = "User",
                            NormalizedName = "USER",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "7b839d19-ac5c-480f-b378-d45445e35cf3",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
