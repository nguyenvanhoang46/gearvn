// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221230155319_Update")]
    partial class Update
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "77b3109c-03fa-418c-8d17-b4f850d64a4b",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 360, DateTimeKind.Utc).AddTicks(7963),
                            IsDeleted = false,
                            Name = "Berta Stanton",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 360, DateTimeKind.Utc).AddTicks(7965)
                        },
                        new
                        {
                            Id = "be839626-78bb-46ae-878d-a1cc22bf0a5c",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 360, DateTimeKind.Utc).AddTicks(9462),
                            IsDeleted = false,
                            Name = "Mitchell Grimes",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 360, DateTimeKind.Utc).AddTicks(9462)
                        },
                        new
                        {
                            Id = "add9428d-cf08-40e3-9305-f22ba8ae2b13",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(636),
                            IsDeleted = false,
                            Name = "Lavern Johnson",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(636)
                        },
                        new
                        {
                            Id = "4bcc28f8-9e60-4fe6-9773-aaa74e39a9a1",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(3294),
                            IsDeleted = false,
                            Name = "Cielo Reichel",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(3295)
                        },
                        new
                        {
                            Id = "e6261521-ecd9-4151-915e-0a7041261cfb",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(4957),
                            IsDeleted = false,
                            Name = "Miss Talia Spinka",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(4957)
                        },
                        new
                        {
                            Id = "926651fa-987a-42c3-b5fe-a0ccddadb6e4",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(6866),
                            IsDeleted = false,
                            Name = "Zakary Corkery",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(6867)
                        },
                        new
                        {
                            Id = "00432e63-f251-4c7c-9ce3-1f1668fe7d84",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(8436),
                            IsDeleted = false,
                            Name = "Mr. Mathias Johnson III",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(8436)
                        },
                        new
                        {
                            Id = "835efcfe-07e0-4847-a989-dc11099837d9",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(9733),
                            IsDeleted = false,
                            Name = "Miss Kaitlyn Murray",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 361, DateTimeKind.Utc).AddTicks(9734)
                        },
                        new
                        {
                            Id = "f3a59264-9c7c-4b88-afee-c54d70fbaf79",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(1066),
                            IsDeleted = false,
                            Name = "Cody Fisher",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(1067)
                        },
                        new
                        {
                            Id = "1dfda534-df0f-4769-bc51-87aa15022006",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(2385),
                            IsDeleted = false,
                            Name = "Dr. Terrance Cremin",
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(2385)
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderCompletionType")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = "9bde741d-fba6-4ebb-8c48-a961468b6ddb",
                            Content = "Consequatur qui officia dolorem tenetur consequatur nobis voluptate. Odit sed labore labore ut earum soluta alias aut quo. Ipsa non qui ipsa magnam eius tempore nesciunt ducimus iste.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(3733),
                            Description = "Quo eligendi omnis et est ratione ratione perferendis amet.",
                            IsDeleted = false,
                            Name = "Lennie Koelpin",
                            Price = 737823L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(3733)
                        },
                        new
                        {
                            Id = "9fbc1664-6fdf-40f8-843e-59f6ed0cc7af",
                            Content = "Labore voluptas ut iure error repellendus dolor quo. Et pariatur dignissimos et et. Sint molestiae est omnis eos ut numquam est sit magni. Ea exercitationem nostrum ipsa fugit qui pariatur repellendus. Et error sit ipsam veritatis. Incidunt iste atque odit ab veritatis veritatis nihil.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(9055),
                            Description = "Laborum quos officia eaque.",
                            IsDeleted = false,
                            Name = "Lane Turner",
                            Price = 529023L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 362, DateTimeKind.Utc).AddTicks(9056)
                        },
                        new
                        {
                            Id = "68f52e9d-be34-45c5-8234-cd319db6857d",
                            Content = "Beatae reiciendis est doloremque porro eum vel laboriosam animi sit. Voluptatum fugit asperiores velit odit modi facere voluptatum. Voluptatem sit numquam dolorum sint consequatur consequatur et ducimus. Doloremque et fugiat expedita consequuntur veritatis non.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 363, DateTimeKind.Utc).AddTicks(3708),
                            Description = "Fugiat soluta cupiditate aut maxime eligendi eum.",
                            IsDeleted = false,
                            Name = "Carmelo Mayer",
                            Price = 396098L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 363, DateTimeKind.Utc).AddTicks(3710)
                        },
                        new
                        {
                            Id = "e70712f1-bc1f-4292-8c02-ae7badf1a9b0",
                            Content = "Velit placeat non autem et unde est vel. Atque rerum ea ea alias est quas et qui magnam. Numquam aut quia soluta quia quia magni non consequatur. Dolor eligendi quia incidunt odit nisi et quia enim quibusdam.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 363, DateTimeKind.Utc).AddTicks(8223),
                            Description = "Atque est id natus et praesentium eveniet sit.",
                            IsDeleted = false,
                            Name = "Louisa Wilderman",
                            Price = 585122L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 363, DateTimeKind.Utc).AddTicks(8224)
                        },
                        new
                        {
                            Id = "c79d3654-b629-4a4c-93b6-e1be9774475d",
                            Content = "Repellat provident ipsa iusto perspiciatis rerum tenetur. Est laborum ut suscipit illo quia quis velit. Voluptates quia at alias est aut quaerat voluptates.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 364, DateTimeKind.Utc).AddTicks(2686),
                            Description = "Eum occaecati ab accusantium numquam qui.",
                            IsDeleted = false,
                            Name = "Mae Morissette",
                            Price = 154140L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 364, DateTimeKind.Utc).AddTicks(2687)
                        },
                        new
                        {
                            Id = "7ae54028-290b-4940-bb06-5af4a1e7c264",
                            Content = "Fugit omnis voluptas modi. Sed commodi non temporibus. Modi quas assumenda aut voluptas dicta cum. Corporis reprehenderit commodi placeat rerum ut et porro. Nobis libero libero iure. Enim rerum similique dolore beatae eos aliquid unde.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 364, DateTimeKind.Utc).AddTicks(6517),
                            Description = "Ut dolor veniam eum et beatae ea quaerat repellendus sed.",
                            IsDeleted = false,
                            Name = "Reese Hayes",
                            Price = 916232L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 364, DateTimeKind.Utc).AddTicks(6518)
                        },
                        new
                        {
                            Id = "f5b3cc90-e0e5-4f41-af5c-78530ca13809",
                            Content = "Saepe a eos voluptas voluptatem eum. Voluptatibus quia provident incidunt consequatur quae ut iste consectetur repellat. Assumenda harum et incidunt mollitia est voluptatem. Aut sequi molestiae ducimus inventore ratione aut eius et. Quia possimus impedit voluptatem ratione nulla est nesciunt non aperiam.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 365, DateTimeKind.Utc).AddTicks(1322),
                            Description = "Tempore qui possimus quam facere autem.",
                            IsDeleted = false,
                            Name = "Dr. Abbey Nolan Rohan II",
                            Price = 979392L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 365, DateTimeKind.Utc).AddTicks(1323)
                        },
                        new
                        {
                            Id = "57bb633e-684a-4763-a89a-ea1e6e3cfde9",
                            Content = "Impedit ea modi commodi reiciendis nobis. Asperiores aut dolorem optio molestias soluta officiis eos modi. Magnam adipisci a quasi nisi voluptas et molestias dolores. Earum quaerat molestiae sed. Quaerat veritatis qui quo et illum cumque quam. Voluptatibus eveniet dolor aperiam fugit quia dignissimos est.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 367, DateTimeKind.Utc).AddTicks(1472),
                            Description = "Consequatur exercitationem repudiandae officiis animi ratione vero.",
                            IsDeleted = false,
                            Name = "Bo Gusikowski",
                            Price = 198893L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 367, DateTimeKind.Utc).AddTicks(1473)
                        },
                        new
                        {
                            Id = "d3b192f6-6feb-446a-9c41-647f1718151f",
                            Content = "Eligendi enim non perspiciatis repudiandae atque necessitatibus et harum. Recusandae id omnis corrupti modi amet in delectus. Eum similique sapiente inventore perspiciatis sint voluptas dolor minima illo. Voluptatem est totam ea ab similique. Sit saepe et incidunt.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 368, DateTimeKind.Utc).AddTicks(5982),
                            Description = "Et voluptas cumque sed asperiores dignissimos sint iusto voluptatem.",
                            IsDeleted = false,
                            Name = "Hellen Weimann",
                            Price = 634056L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 368, DateTimeKind.Utc).AddTicks(5983)
                        },
                        new
                        {
                            Id = "247ed036-4a0b-40aa-b161-e5404cf54f62",
                            Content = "Deserunt totam ullam laudantium ipsam aut maxime et distinctio. Consequatur nobis id dolorum aut aut ratione. Ipsam autem a est consequatur voluptas. Natus sapiente quia vero. Ab exercitationem dignissimos doloribus aut magnam beatae qui. Quae ut occaecati nihil ut.",
                            CreatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 369, DateTimeKind.Utc).AddTicks(6928),
                            Description = "Est soluta placeat saepe ad et id.",
                            IsDeleted = false,
                            Name = "John Bergstrom",
                            Price = 509934L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2022, 12, 30, 15, 53, 19, 369, DateTimeKind.Utc).AddTicks(6929)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "cdd1ef71-55f4-42ba-a995-a00f4149d6c2",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d663c150-b73f-4895-82c9-d444e0749270",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "86182564-0e7c-4ce6-ace7-4a75a01fd414",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5930a6dd-f615-4a93-97ba-72d8dc945f8f",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b3d9a5f7-c545-45de-9b38-9d5a967ab3a1",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "7e12d397-068c-47a4-aec6-413a7cb99f98",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "4d3046b3-c41b-4a40-834b-003cc978eca0",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "b14fb576-3728-4e51-92d0-fc1f5c280592",
                            Name = "User",
                            NormalizedName = "USER",
                            IsDelete = false
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "c3d7a70d-1a07-4852-a0bc-be42723c8965",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            IsDelete = false
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
