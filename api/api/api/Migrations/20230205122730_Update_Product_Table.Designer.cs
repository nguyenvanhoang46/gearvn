// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230205122730_Update_Product_Table")]
    partial class Update_Product_Table
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "319c2c3c-316d-479b-b661-5cf9baad9589",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 777, DateTimeKind.Utc).AddTicks(7626),
                            IsDeleted = false,
                            Name = "Ms. Joey Kenna Lang MD",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 777, DateTimeKind.Utc).AddTicks(7628)
                        },
                        new
                        {
                            Id = "a6122378-04b4-4b16-b460-4bb37c030090",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 777, DateTimeKind.Utc).AddTicks(9453),
                            IsDeleted = false,
                            Name = "Leola Brown",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 777, DateTimeKind.Utc).AddTicks(9454)
                        },
                        new
                        {
                            Id = "5c5d64e9-4189-4534-a3b5-314883f90adb",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(404),
                            IsDeleted = false,
                            Name = "Prof. Hudson Cesar Rolfson Sr.",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(405)
                        },
                        new
                        {
                            Id = "97533320-15b0-4d6b-bc3e-c3f956c2cbfe",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(2012),
                            IsDeleted = false,
                            Name = "Leonel Howell",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(2013)
                        },
                        new
                        {
                            Id = "c1b6c011-ba5a-4b75-9017-2899c7360736",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(2881),
                            IsDeleted = false,
                            Name = "Nolan Ebert",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(2881)
                        },
                        new
                        {
                            Id = "b09f4adf-2aa8-4068-8376-5b89e912dd29",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(3784),
                            IsDeleted = false,
                            Name = "Derek Parker",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(3784)
                        },
                        new
                        {
                            Id = "d4c4b85f-a8ad-4f53-a46f-f21ba077e942",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(4959),
                            IsDeleted = false,
                            Name = "Art Walker",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(4960)
                        },
                        new
                        {
                            Id = "3c9fc0ee-3ef9-44a0-8116-a10c961a4ecf",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(6211),
                            IsDeleted = false,
                            Name = "Johnathon Blanda V",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(6211)
                        },
                        new
                        {
                            Id = "028b0e3a-ee00-429b-86b6-90ab6b5c3e43",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(7526),
                            IsDeleted = false,
                            Name = "Mr. Rashawn Ullrich Jr.",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(7527)
                        },
                        new
                        {
                            Id = "4acd12e9-4170-4e19-90b1-eac262dddc3d",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(8819),
                            IsDeleted = false,
                            Name = "Santino Jerde",
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 778, DateTimeKind.Utc).AddTicks(8820)
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderCompletionType")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = "69477238-2be0-49c4-9dd7-fc905c294c0b",
                            Content = "Nobis modi saepe vel vel in ex molestiae quia. Eum architecto unde veniam molestiae recusandae et. Vel nobis ratione ex sunt perspiciatis nostrum. Vel eveniet aspernatur fuga ut est perspiciatis dolorem non. Aut aut est sapiente magnam. Natus dicta optio provident rerum nulla aut quos commodi numquam.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 779, DateTimeKind.Utc).AddTicks(98),
                            Description = "Harum aut adipisci reprehenderit.",
                            IsDeleted = false,
                            Name = "Brock Heathcote",
                            Price = 177340L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 779, DateTimeKind.Utc).AddTicks(99)
                        },
                        new
                        {
                            Id = "3b2728ac-9267-457d-a309-43c0b7d96c47",
                            Content = "Est assumenda quisquam voluptatem consequatur cupiditate optio. Nobis occaecati eveniet possimus doloremque dolore id facilis. Earum quia placeat aut rerum architecto quasi minima est. Sed aut et quasi expedita dignissimos. Exercitationem dolorem est voluptate ut quis non soluta ullam facilis.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 779, DateTimeKind.Utc).AddTicks(8298),
                            Description = "Ex dolor recusandae totam.",
                            IsDeleted = false,
                            Name = "Prof. Garth Smith",
                            Price = 848552L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 779, DateTimeKind.Utc).AddTicks(8301)
                        },
                        new
                        {
                            Id = "ccc3afd7-1a40-4d23-be1f-89f6b2b52ccc",
                            Content = "Quis sed earum ut laudantium non rerum quae ea inventore. Et sed quia quas vitae quam distinctio qui eaque. Laborum doloremque culpa error aut et.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 780, DateTimeKind.Utc).AddTicks(6408),
                            Description = "Dolorem aut voluptas similique.",
                            IsDeleted = false,
                            Name = "Dorcas Cruickshank",
                            Price = 785515L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 780, DateTimeKind.Utc).AddTicks(6412)
                        },
                        new
                        {
                            Id = "230f777e-907b-419c-9a8a-4e3dce9d169b",
                            Content = "Nam veritatis totam quaerat. Vel id velit id. Magnam pariatur mollitia voluptatem et eligendi. Dolor sunt dolore error laboriosam et officiis ut soluta itaque.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 781, DateTimeKind.Utc).AddTicks(3715),
                            Description = "In quos mollitia hic dolores et ducimus.",
                            IsDeleted = false,
                            Name = "Dedrick Howe",
                            Price = 692349L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 781, DateTimeKind.Utc).AddTicks(3724)
                        },
                        new
                        {
                            Id = "6d62e6bc-35f3-44b8-bc8f-7a2c8e04ff44",
                            Content = "Quod modi ut occaecati et dolorem iure. Autem rerum ex quasi. Magni tempora vel cumque cumque labore eius.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 782, DateTimeKind.Utc).AddTicks(378),
                            Description = "Et eum qui sed accusantium esse.",
                            IsDeleted = false,
                            Name = "Allen Pearlie Halvorson IV",
                            Price = 286053L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 782, DateTimeKind.Utc).AddTicks(380)
                        },
                        new
                        {
                            Id = "e964ae5e-f062-4950-8277-bf6f788d31b2",
                            Content = "Ea perferendis et ut. Sit et non nulla deleniti maiores voluptate. Aliquam delectus sit cupiditate quidem. Eaque aut nostrum et vitae.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 782, DateTimeKind.Utc).AddTicks(8406),
                            Description = "Velit ut in tempore ab voluptas nihil.",
                            IsDeleted = false,
                            Name = "Eino Hyatt",
                            Price = 105016L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 782, DateTimeKind.Utc).AddTicks(8499)
                        },
                        new
                        {
                            Id = "7710252b-35e9-41dd-929b-bd7f7c723c86",
                            Content = "Aut ad quia maiores iure esse repellendus aut. Similique rerum ipsum qui dolorem. Ipsam dolorem cum amet qui eaque eos ducimus. Distinctio consequuntur accusamus maxime harum qui rerum. Fugit est magni provident.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 783, DateTimeKind.Utc).AddTicks(2648),
                            Description = "Officiis doloremque doloribus et quae ipsam voluptas voluptas.",
                            IsDeleted = false,
                            Name = "Golden Nitzsche",
                            Price = 523595L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 783, DateTimeKind.Utc).AddTicks(2649)
                        },
                        new
                        {
                            Id = "3e1b06e4-adb4-4d09-9658-2bc9a1eb400a",
                            Content = "Dicta quod aut aliquam totam repellendus voluptas. Non odit aut et ad iusto nostrum sed dolorem alias. Et inventore natus facere dolorum praesentium doloribus et optio. In perferendis libero eveniet qui commodi eum. Vel voluptatum recusandae pariatur optio. Vel ea est animi consectetur adipisci aut sed quod distinctio.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 784, DateTimeKind.Utc).AddTicks(387),
                            Description = "Aspernatur optio temporibus maxime.",
                            IsDeleted = false,
                            Name = "Jarrod West",
                            Price = 880498L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 784, DateTimeKind.Utc).AddTicks(387)
                        },
                        new
                        {
                            Id = "d627cc04-3490-48fb-bbc8-368590df9a9e",
                            Content = "Et corrupti voluptas ullam sed aut. Voluptate dignissimos consequuntur fugit et. Consequatur sint molestias quisquam quo non quam repellendus rerum. Fugit ipsa sed quasi consequatur corporis. Et placeat soluta sit officiis.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 784, DateTimeKind.Utc).AddTicks(9628),
                            Description = "Asperiores rerum necessitatibus omnis hic.",
                            IsDeleted = false,
                            Name = "Shayne Raynor III",
                            Price = 705437L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 784, DateTimeKind.Utc).AddTicks(9628)
                        },
                        new
                        {
                            Id = "a280baca-65d9-4f78-b2b2-23af6e182132",
                            Content = "Minus dolor et rerum est. Nulla non excepturi reprehenderit eum et sapiente ut commodi. Reprehenderit itaque in velit.",
                            CreatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 785, DateTimeKind.Utc).AddTicks(6421),
                            Description = "Id nesciunt et quod.",
                            IsDeleted = false,
                            Name = "Dr. Rudolph Shayne Lockman",
                            Price = 779384L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 5, 12, 27, 29, 785, DateTimeKind.Utc).AddTicks(6422)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "538854ad-3de1-4b08-a74c-121ecaa8c8ff",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "9efb6f9e-1f2c-4938-a5df-bd1ad1a46cde",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d931e75-fbed-4556-8719-589e96f124a4",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "933cc1c0-de5e-4915-bbb9-653fcfbe0fbf",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4482f5f7-c0d0-4c6b-ad3c-d80f7e5edfba",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            IsDeleted = false,
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5650055a-f24b-4305-8eaa-0fe73e6bda65",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "e81f15a1-028f-4d80-a87d-5061facca41e",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "634ccd0b-c551-40e7-9e26-97c3ca2562a8",
                            Name = "User",
                            NormalizedName = "USER",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "e7564feb-b9a4-4a9c-99ac-029e361b2fe1",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
