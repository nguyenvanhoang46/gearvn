// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "13cdbb17-7050-4aba-89f1-38d4a5af8819",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 690, DateTimeKind.Utc).AddTicks(5649),
                            IsDeleted = false,
                            Name = "Jena West",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 690, DateTimeKind.Utc).AddTicks(5653)
                        },
                        new
                        {
                            Id = "3aed4bce-ec44-4a30-94ff-11f48740ac14",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 690, DateTimeKind.Utc).AddTicks(7197),
                            IsDeleted = false,
                            Name = "Giovanni Tracy Kirlin II",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 690, DateTimeKind.Utc).AddTicks(7198)
                        },
                        new
                        {
                            Id = "5be87de1-b3bf-4bac-9144-73bd36edf921",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(849),
                            IsDeleted = false,
                            Name = "Justus Kraig Osinski I",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(849)
                        },
                        new
                        {
                            Id = "c5e15828-b79d-4dc9-ae8d-26f41d8c68f5",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(3359),
                            IsDeleted = false,
                            Name = "Erin Schneider",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(3359)
                        },
                        new
                        {
                            Id = "1030b813-4d10-4539-96ea-8544907b7b29",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(4902),
                            IsDeleted = false,
                            Name = "Turner Emmerich",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(4902)
                        },
                        new
                        {
                            Id = "066c1dff-f6cb-49b6-8d83-1a222dea650f",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(6282),
                            IsDeleted = false,
                            Name = "Leonor Toy",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(6283)
                        },
                        new
                        {
                            Id = "4150c5ba-10c3-40ec-bcb6-df540b968c51",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(7805),
                            IsDeleted = false,
                            Name = "Ms. Kenyatta Gislason",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(7806)
                        },
                        new
                        {
                            Id = "c699a308-a4a5-4fd4-89ce-be3a757bfcf7",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(9072),
                            IsDeleted = false,
                            Name = "Miss Alexys Alex Parisian",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 691, DateTimeKind.Utc).AddTicks(9072)
                        },
                        new
                        {
                            Id = "947f1398-d52e-4f1a-8e31-6d2fbf27a41c",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(1417),
                            IsDeleted = false,
                            Name = "Arden Friesen Jr.",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(1418)
                        },
                        new
                        {
                            Id = "f4e3da1d-44d4-421e-a449-baa6d56ee73e",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(2714),
                            IsDeleted = false,
                            Name = "Lue Glover",
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(2714)
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderCompletionType")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = "c34b76af-ed66-4cf4-9c4b-a4870759449d",
                            Content = "Perferendis beatae nam cumque aut porro. Repellendus rerum sint exercitationem commodi qui suscipit non doloribus. Aut aut nihil velit non sit a. Quisquam harum praesentium provident sunt eos. Modi nesciunt tempore iste esse facere quas molestiae.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(3978),
                            Description = "Nostrum et voluptatibus iste rem.",
                            IsDeleted = false,
                            Name = "Emerald Brakus II",
                            Price = 860971L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(3979)
                        },
                        new
                        {
                            Id = "e05702e1-86ba-4df6-9c37-225b82a5e868",
                            Content = "Ut soluta harum id id fuga qui ea aliquid voluptatem. Maxime facere perspiciatis deleniti enim. Nihil voluptates ex vel sint. Id hic nisi quia ut sunt. Minus voluptatem consequatur magnam quos blanditiis quae. Hic quia quia laborum ex ab cumque non voluptatem.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(9025),
                            Description = "Ratione consequatur ipsum et aperiam.",
                            IsDeleted = false,
                            Name = "Miss Roberto Schmidt",
                            Price = 939093L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 692, DateTimeKind.Utc).AddTicks(9025)
                        },
                        new
                        {
                            Id = "fffa018f-e5b2-46ad-bec1-d06f0e9e0f37",
                            Content = "Rerum harum sit molestiae non omnis debitis omnis eaque iste. Tempora aut provident inventore ut ut. Et quibusdam et exercitationem ut velit. Eum a iusto et vel possimus quia reprehenderit. Aliquid dignissimos nobis voluptas.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 693, DateTimeKind.Utc).AddTicks(4978),
                            Description = "Fugiat ut id eum omnis consequuntur ut.",
                            IsDeleted = false,
                            Name = "Oswald Fabian Stracke I",
                            Price = 114070L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 693, DateTimeKind.Utc).AddTicks(4979)
                        },
                        new
                        {
                            Id = "4180835a-4151-4b9e-82d8-87c688310f59",
                            Content = "Quo nam quo et incidunt qui hic. Fuga voluptates corporis dolor dolorem debitis. Similique assumenda quis placeat voluptatem ullam eveniet reprehenderit iure. Sed mollitia atque cumque qui ut ut. Aperiam odit est sit.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 694, DateTimeKind.Utc).AddTicks(711),
                            Description = "Et modi provident vel repellendus incidunt necessitatibus.",
                            IsDeleted = false,
                            Name = "Dr. Eliezer Torp Jr.",
                            Price = 427588L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 694, DateTimeKind.Utc).AddTicks(711)
                        },
                        new
                        {
                            Id = "afe8e109-1eca-4d1d-9d9c-c57350339b92",
                            Content = "Et eveniet optio corrupti libero asperiores voluptatum voluptatem ea. Sed rerum aliquam debitis ea hic possimus. Magnam unde voluptas vel tempora voluptas voluptates quam tempore.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 694, DateTimeKind.Utc).AddTicks(7068),
                            Description = "Non perspiciatis inventore qui enim et quibusdam.",
                            IsDeleted = false,
                            Name = "Prof. Maurice Runolfsdottir",
                            Price = 751097L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 694, DateTimeKind.Utc).AddTicks(7069)
                        },
                        new
                        {
                            Id = "964a8a81-20f9-46fc-8107-d8f40e845b90",
                            Content = "Eum perspiciatis modi error possimus officia consequatur. Vel magni reiciendis libero et ullam nisi. Numquam laboriosam beatae doloribus. Qui eum dolorem eveniet quod saepe.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 695, DateTimeKind.Utc).AddTicks(1955),
                            Description = "Est est provident excepturi quia hic dolores earum.",
                            IsDeleted = false,
                            Name = "Dave Zboncak",
                            Price = 992146L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 695, DateTimeKind.Utc).AddTicks(1959)
                        },
                        new
                        {
                            Id = "0e8e15d2-3f49-402e-9516-bffdae3b649e",
                            Content = "Eos enim consequuntur corporis ipsam omnis expedita nisi delectus sed. Aperiam necessitatibus vero omnis dolore id accusamus asperiores. Incidunt iste et ut autem et. Est natus saepe sapiente ullam ut dolores ratione dolorum ad. Ullam nobis necessitatibus quis laboriosam fugiat qui inventore.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 695, DateTimeKind.Utc).AddTicks(6759),
                            Description = "Amet fugit alias beatae culpa non quo.",
                            IsDeleted = false,
                            Name = "Joey Stokes",
                            Price = 615925L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 695, DateTimeKind.Utc).AddTicks(6760)
                        },
                        new
                        {
                            Id = "ce7f19d7-23a2-4a9f-850a-3e615437777b",
                            Content = "In optio sint dolorum omnis adipisci eos numquam nobis. Quia quisquam corporis minima rerum ipsa impedit explicabo aut amet. Nemo dolorem ratione et autem nihil. Fugit deserunt perspiciatis unde facilis.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 696, DateTimeKind.Utc).AddTicks(2012),
                            Description = "Mollitia repudiandae ut quo aut.",
                            IsDeleted = false,
                            Name = "Prof. Kianna Fern Boyle",
                            Price = 695212L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 696, DateTimeKind.Utc).AddTicks(2013)
                        },
                        new
                        {
                            Id = "3120c60c-aa52-40ab-8a54-f4fd93a81de8",
                            Content = "Veniam magni vitae repudiandae ea non laboriosam consequatur inventore nobis. Nemo hic dignissimos pariatur. Fugit est odit at. Id quia qui officiis ut.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 696, DateTimeKind.Utc).AddTicks(7547),
                            Description = "Neque dolorem praesentium repellendus.",
                            IsDeleted = false,
                            Name = "Mr. Britney Little",
                            Price = 103031L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 696, DateTimeKind.Utc).AddTicks(7548)
                        },
                        new
                        {
                            Id = "6d4ff129-5d22-4251-aac9-28cefc75dbfa",
                            Content = "Consequatur aperiam atque magni magnam fugit. Repellendus quas et veritatis cupiditate velit sit non. Velit velit qui id earum. Possimus natus vel deleniti. Molestias nihil nostrum fugit sint. Sunt temporibus asperiores saepe dicta.",
                            CreatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 697, DateTimeKind.Utc).AddTicks(1054),
                            Description = "Vitae est illo non a nam et.",
                            IsDeleted = false,
                            Name = "Fausto Hauck",
                            Price = 417888L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 8, 6, 34, 697, DateTimeKind.Utc).AddTicks(1055)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a3444d9e-0296-4bba-ba58-ab97862e60dc",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "5a5a7225-4270-419f-aee6-20edf10af073",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8f8c13a0-a58e-47c5-bcb4-292d08eaaf0e",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "3de19989-8d93-40b8-b453-6a5733f87559",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ce803c06-3765-4eb4-b86d-099558927c78",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            IsDeleted = false,
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "80c418bd-56fd-4b85-88d0-00af1d3e0b7e",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "c2905d59-94d4-4d1c-a165-eeaad38a2f4e",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "965a7bcf-8ed1-41cb-b420-9795074b6055",
                            Name = "User",
                            NormalizedName = "USER",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "0f48b9a0-6c21-4d7c-9313-5aa0377f59ab",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
