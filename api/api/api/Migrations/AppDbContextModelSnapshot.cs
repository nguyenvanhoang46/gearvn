// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Context;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = "a0d701b6-ce97-4fb5-bb7b-627546e72ce6",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 839, DateTimeKind.Utc).AddTicks(7371),
                            IsDeleted = false,
                            Name = "Roy Lang",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 839, DateTimeKind.Utc).AddTicks(7374)
                        },
                        new
                        {
                            Id = "fa8376b5-c742-44a2-a528-6ddf834f7ccb",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 840, DateTimeKind.Utc).AddTicks(5941),
                            IsDeleted = false,
                            Name = "Orie Fay III",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 840, DateTimeKind.Utc).AddTicks(5943)
                        },
                        new
                        {
                            Id = "2a3304f0-3e41-4af3-b41c-780339ac8be7",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 840, DateTimeKind.Utc).AddTicks(8325),
                            IsDeleted = false,
                            Name = "Milford Armstrong",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 840, DateTimeKind.Utc).AddTicks(8325)
                        },
                        new
                        {
                            Id = "51739595-9189-47a8-9179-c4d79e625944",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 840, DateTimeKind.Utc).AddTicks(9913),
                            IsDeleted = false,
                            Name = "Miller O'Hara I",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 840, DateTimeKind.Utc).AddTicks(9914)
                        },
                        new
                        {
                            Id = "ee3ba930-9ecc-4d88-ac06-d982a8edb2bb",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(878),
                            IsDeleted = false,
                            Name = "Mrs. Brannon Fritsch",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(879)
                        },
                        new
                        {
                            Id = "940648ee-1e5e-4237-8509-eff2aa28dbf4",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(1791),
                            IsDeleted = false,
                            Name = "Mario Borer",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(1792)
                        },
                        new
                        {
                            Id = "55a4e8e3-bc3f-4d5f-be8d-e4ed25528162",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(2654),
                            IsDeleted = false,
                            Name = "Mrs. Meagan Trevion Buckridge III",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(2654)
                        },
                        new
                        {
                            Id = "d1b62435-a345-4b4d-9f90-3b885dc72053",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(4322),
                            IsDeleted = false,
                            Name = "Mr. Dominic Murphy II",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(4323)
                        },
                        new
                        {
                            Id = "6a86801b-dd82-4780-9416-278678682c44",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(5228),
                            IsDeleted = false,
                            Name = "Dr. Hazel Leo Mayer",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(5228)
                        },
                        new
                        {
                            Id = "107a3a95-7de9-43a6-84d3-6492e2dde0a0",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(7797),
                            IsDeleted = false,
                            Name = "Marques Jones",
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(7797)
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Alt")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("OrderCompletionType")
                        .HasColumnType("int");

                    b.Property<int>("OrderType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProductId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetail");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CategoryId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<long>("SalePrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = "d4d70b70-42a8-4746-86ce-15ab45c21c69",
                            Content = "Qui eligendi accusamus molestias reiciendis qui. Unde eius dignissimos saepe ut distinctio. Sint occaecati qui tenetur.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(8701),
                            Description = "Est et numquam commodi quo illo.",
                            IsDeleted = false,
                            Name = "Mrs. Genesis Reichel",
                            Price = 616921L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 841, DateTimeKind.Utc).AddTicks(8701)
                        },
                        new
                        {
                            Id = "1d30dfd8-c425-4eb2-b376-8a1d1807720e",
                            Content = "Totam amet pariatur accusamus sunt dolores quia harum. Occaecati officiis dolores sint eligendi eos et officiis expedita. Quo laudantium iure quo nemo voluptatum nobis adipisci earum. Hic numquam quasi cum.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 842, DateTimeKind.Utc).AddTicks(3654),
                            Description = "Blanditiis exercitationem quidem tenetur quia dolores iusto.",
                            IsDeleted = false,
                            Name = "Miss Marianna Beer",
                            Price = 727160L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 842, DateTimeKind.Utc).AddTicks(3655)
                        },
                        new
                        {
                            Id = "7c2c0627-944d-415b-b2bd-3519f369643d",
                            Content = "Saepe iure cupiditate et consectetur facere consequatur est est. Distinctio qui totam unde qui. Sunt earum maiores qui architecto minus.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 842, DateTimeKind.Utc).AddTicks(9001),
                            Description = "Magnam ut eius ipsum ducimus eum rem et reiciendis.",
                            IsDeleted = false,
                            Name = "Ms. Wava Catherine Gutmann Sr.",
                            Price = 565231L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 842, DateTimeKind.Utc).AddTicks(9001)
                        },
                        new
                        {
                            Id = "880e3ad1-0bd7-4ff3-b850-ecc2d0102529",
                            Content = "Quam fuga beatae architecto quasi asperiores iste eveniet aut est. Quisquam quia ea dolores aut facere ab. Nulla et molestiae repellendus et. Fugit nobis voluptate magni omnis non vel magnam perferendis. Nostrum accusamus quae delectus omnis maiores.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 843, DateTimeKind.Utc).AddTicks(4284),
                            Description = "Soluta et fugit aut dolores ut corrupti consectetur ex deserunt.",
                            IsDeleted = false,
                            Name = "Humberto Dibbert",
                            Price = 214942L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 843, DateTimeKind.Utc).AddTicks(4284)
                        },
                        new
                        {
                            Id = "0fc51aff-8135-412b-9e69-11354cdb7566",
                            Content = "Est eos id minus cum est iure et iusto. Et deleniti est ipsum quos nihil sunt consequatur tempore. Omnis sequi rerum porro ab.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 843, DateTimeKind.Utc).AddTicks(7933),
                            Description = "Ut alias et est omnis deserunt eveniet quae quis accusantium.",
                            IsDeleted = false,
                            Name = "Bernard Ryan",
                            Price = 570847L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 843, DateTimeKind.Utc).AddTicks(7933)
                        },
                        new
                        {
                            Id = "0ef87065-5abb-4fd2-8a11-7f3463566fab",
                            Content = "Dolore repellat itaque sit et explicabo numquam quidem vel. Molestiae amet sunt optio aut sed molestias quis nam. Consequuntur cumque ducimus quos provident saepe nostrum est deserunt.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 844, DateTimeKind.Utc).AddTicks(1932),
                            Description = "Unde laudantium doloribus maiores quo temporibus omnis minus.",
                            IsDeleted = false,
                            Name = "Jerad Senger",
                            Price = 908348L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 844, DateTimeKind.Utc).AddTicks(1932)
                        },
                        new
                        {
                            Id = "88a60a5e-44b1-419c-aa34-25296f36dd03",
                            Content = "Et sit est dolores optio. Ut cum corporis et rem deserunt deleniti illum voluptate laudantium. Recusandae deserunt ullam praesentium distinctio reprehenderit quis accusantium. Molestiae eius voluptas sit occaecati et in tenetur doloribus. Voluptas id quos sit omnis delectus.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 844, DateTimeKind.Utc).AddTicks(5511),
                            Description = "Ut omnis animi et.",
                            IsDeleted = false,
                            Name = "Jody Lysanne Corkery PhD",
                            Price = 428848L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 844, DateTimeKind.Utc).AddTicks(5511)
                        },
                        new
                        {
                            Id = "7a70a52d-cd8e-44c6-b245-13be0ecb3fe8",
                            Content = "Repellat non eos beatae repellendus. Repellendus nihil ab et aliquam natus repellat quia. At pariatur excepturi nemo et. Illo repellendus dignissimos omnis. Commodi eum enim quam.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 845, DateTimeKind.Utc).AddTicks(1638),
                            Description = "Non et et vero tenetur voluptate odio.",
                            IsDeleted = false,
                            Name = "Allene Thompson",
                            Price = 220788L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 845, DateTimeKind.Utc).AddTicks(1639)
                        },
                        new
                        {
                            Id = "b914f56b-394a-44c1-b1fc-bf47026ff2c0",
                            Content = "Pariatur illo magni molestiae sapiente cum aut. A expedita odit velit occaecati consectetur alias nulla alias. Quam est porro explicabo esse at voluptatem aut earum. Earum sint quibusdam quisquam qui illo maxime qui excepturi. Soluta voluptas voluptas aut itaque fugit magnam.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 845, DateTimeKind.Utc).AddTicks(5917),
                            Description = "Quia maxime vero ut aut modi.",
                            IsDeleted = false,
                            Name = "Adolphus Huel",
                            Price = 291365L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 845, DateTimeKind.Utc).AddTicks(5918)
                        },
                        new
                        {
                            Id = "d31bc077-d7de-4b78-ae67-76ad231b17c7",
                            Content = "Quis eius ut modi quod deserunt fugit corporis porro. Quasi facere iure veritatis eius consectetur necessitatibus. Non quia et pariatur odit non necessitatibus. Occaecati vel voluptas magnam consequuntur.",
                            CreatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 846, DateTimeKind.Utc).AddTicks(1080),
                            Description = "Cupiditate quam et quae qui est libero dignissimos.",
                            IsDeleted = false,
                            Name = "Walker Kathlyn Nitzsche I",
                            Price = 916380L,
                            Quantity = 1,
                            SalePrice = 0L,
                            UpdatedAt = new DateTime(2023, 2, 8, 15, 51, 16, 846, DateTimeKind.Utc).AddTicks(1081)
                        });
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f9b3a70d-d34f-40c2-be3b-c8829ef55f20",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            IsDeleted = false,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "38f118fd-b7eb-43d5-93a7-e8f5aac33eef",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d119fc3c-0531-41fd-ba42-5ffff8139d88",
                            Email = "user@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            IsDeleted = false,
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@GMAIL.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "aeceed83-b500-4312-80f7-9809dbcc93a4",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "13e56d87-df9e-46e2-956b-0f5028d059b8",
                            Email = "guest@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Guest",
                            IsDeleted = false,
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "GUEST@GMAIL.COM",
                            NormalizedUserName = "GUEST",
                            PasswordHash = "AAuIVXm1hor21nLBhSwPe59KTGKy2+Yvw6rJSey4WiFHXM6pa0VvOV7RtQ5qG59sRQ==",
                            PhoneNumberConfirmed = false,
                            RefreshTokenExpiryTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "d8882bed-4dcc-438c-9eb6-53674068464a",
                            TwoFactorEnabled = false,
                            UserName = "Guest"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2dfb43f4-24d5-44a7-af3c-78196e881f23",
                            RoleId = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c"
                        },
                        new
                        {
                            UserId = "75fa9827-0f5f-41db-a825-64d68d242d7e",
                            RoleId = "dddd1a59-3b57-45f6-96b5-91b3e269e87c"
                        },
                        new
                        {
                            UserId = "df31566d-5ccb-45dc-b1be-864d72133ca4",
                            RoleId = "b600478d-f98b-4a27-aa95-14563920d28f"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("api.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.HasDiscriminator().HasValue("Role");

                    b.HasData(
                        new
                        {
                            Id = "cc3b4c20-7ab3-4daa-b777-0018ee8c615c",
                            ConcurrencyStamp = "7656d1f5-af1f-4289-84a2-77cf1d34f550",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "dddd1a59-3b57-45f6-96b5-91b3e269e87c",
                            ConcurrencyStamp = "3d306e59-8786-45f5-bea2-b0cb01a7dda4",
                            Name = "User",
                            NormalizedName = "USER",
                            IsDeleted = false
                        },
                        new
                        {
                            Id = "b600478d-f98b-4a27-aa95-14563920d28f",
                            ConcurrencyStamp = "6770b137-fe39-457c-9b1c-fd00e9025855",
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("api.Models.Morph.Image", b =>
                {
                    b.HasOne("api.Models.Product", null)
                        .WithMany("Images")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.HasOne("api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.OrderDetail", b =>
                {
                    b.HasOne("api.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.HasOne("api.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("api.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("api.Models.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
